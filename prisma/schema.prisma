generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id           Int                   @id @default(autoincrement())
  name         String                @db.VarChar(100)
  location     String                @db.VarChar(255)
  phone        String?               @db.VarChar(20)
  products     Product[]             @relation("BranchToProducts")
  users        User[]                @relation("BranchToUsers")
  categories   Category[]
  stockHistory ProductStockHistory[] @relation("BranchToStockHistory")
  transfersOut ProductTransfer[]     @relation("BranchToTransfersOut")
  transfersIn  ProductTransfer[]     @relation("BranchToTransfersIn")
  transactions Transaction[]         @relation("BranchToTransactions")
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@unique([name, location])
  @@index([location])
}

model User {
  id                 Int                   @id @default(autoincrement())
  name               String                @db.VarChar(100)
  email              String                @unique @db.VarChar(255)
  password           String                @db.VarChar(255)
  phone              String?               @db.VarChar(20)
  role               UserRole
  branchId           Int
  branch             Branch                @relation("BranchToUsers", fields: [branchId], references: [id], onDelete: Restrict)
  transactions       Transaction[]         @relation("UserToTransactions")
  location           UserLocation?
  stockHistory       ProductStockHistory[] @relation("UserToStockHistory")
  transfersInitiated ProductTransfer[]     @relation("UserToTransfers")
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  @@index([email, branchId])
}

model UserLocation {
  userId    Int      @id
  user      User     @relation(fields: [userId], references: [id])
  latitude  Float
  longitude Float
  address   String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  WAREHOUSE
  AUDITOR
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  products    Product[] @relation("CategoryToProducts")
  branchId    Int?
  branch      Branch?   @relation(fields: [branchId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model Product {
  id              Int                   @id @default(autoincrement())
  name            String                @db.VarChar(100)
  barcode         String                @unique @db.VarChar(50)
  description     String?               @db.VarChar(255)
  categoryId      Int
  category        Category              @relation("CategoryToProducts", fields: [categoryId], references: [id], onDelete: Restrict)
  branchId        Int
  branch          Branch                @relation("BranchToProducts", fields: [branchId], references: [id], onDelete: Restrict)
  status          ProductStatus
  price           Float
  marketPrice     Float?
  model           String?
  initialQuantity Int                   @default(0)
  quantity        Int                   @default(0)
  stockHistory    ProductStockHistory[] @relation("ProductToStockHistory")
  transactionItems TransactionItem[]     @relation("ProductToTransactionItems")
  transfers       ProductTransfer[]     @relation("ProductToTransfers")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([barcode, branchId, categoryId])
}

enum ProductStatus {
  IN_WAREHOUSE
  IN_STORE
  SOLD
  DEFECTIVE
  RETURNED
  CARRIER
}

model Customer {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(100)
  lastName     String        @db.VarChar(100)
  phone        String?       @db.VarChar(20)
  address      String?       @db.VarChar(500)
  email        String?       @unique @db.VarChar(255)
  transactions Transaction[] @relation("CustomerToTransactions")
  receipts     Receipt[]     @relation("CustomerToReceipts")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([phone, email])
}

model Transaction {
  id               Int                   @id @default(autoincrement())
  userId           Int
  customerId       Int?
  branchId         Int?
  type             TransactionType
  status           TransactionStatus     @default(PENDING)
  discount         Float?                @default(0)
  total            Float
  finalTotal       Float
  paymentType      PaymentType?
  deliveryMethod   String?
  amountPaid       Float?
  remainingBalance Float?
  receiptId        String?               @unique
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  user             User                  @relation("UserToTransactions", fields: [userId], references: [id], onDelete: Restrict)
  customer         Customer?             @relation("CustomerToTransactions", fields: [customerId], references: [id], onDelete: SetNull)
  branch           Branch?               @relation("BranchToTransactions", fields: [branchId], references: [id], onDelete: SetNull)
  receipt          Receipt?              @relation("TransactionToReceipt", fields: [receiptId], references: [id], onDelete: Cascade)
  items            TransactionItem[]     @relation("TransactionToItems")
  stockHistory     ProductStockHistory[] @relation("TransactionToStockHistory")
}

enum TransactionType {
  SALE
  RETURN
  TRANSFER
  WRITE_OFF
  STOCK_ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CASH
  CARD
  CREDIT
}

model TransactionItem {
  id            Int         @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  price         Float
  total         Float
  creditMonth   Int?
  creditPercent Float?
  monthlyPayment Float?
  transaction   Transaction @relation("TransactionToItems", fields: [transactionId], references: [id], onDelete: Cascade)
  product       Product     @relation("ProductToTransactionItems", fields: [productId], references: [id], onDelete: Restrict)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([transactionId, productId])
}

model ProductStockHistory {
  id            Int              @id @default(autoincrement())
  productId     Int
  product       Product          @relation("ProductToStockHistory", fields: [productId], references: [id], onDelete: Restrict)
  transactionId Int?
  transaction   Transaction?     @relation("TransactionToStockHistory", fields: [transactionId], references: [id], onDelete: SetNull)
  branchId      Int
  branch        Branch           @relation("BranchToStockHistory", fields: [branchId], references: [id], onDelete: Restrict)
  quantity      Int
  type          StockHistoryType
  description   String?          @db.VarChar(255)
  createdById   Int?
  createdBy     User?            @relation("UserToStockHistory", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([productId, transactionId, branchId, createdAt])
}

enum StockHistoryType {
  INFLOW
  OUTFLOW
  ADJUSTMENT
  RETURN
  TRANSFER_IN
  TRANSFER_OUT
}

model ProductTransfer {
  id            Int            @id @default(autoincrement())
  productId     Int
  product       Product        @relation("ProductToTransfers", fields: [productId], references: [id], onDelete: Restrict)
  fromBranchId  Int
  fromBranch    Branch         @relation("BranchToTransfersOut", fields: [fromBranchId], references: [id], onDelete: Restrict)
  toBranchId    Int
  toBranch      Branch         @relation("BranchToTransfersIn", fields: [toBranchId], references: [id], onDelete: Restrict)
  quantity      Int
  transferDate  DateTime
  initiatedById Int
  initiatedBy   User           @relation("UserToTransfers", fields: [initiatedById], references: [id], onDelete: Restrict)
  status        TransferStatus
  notes         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([productId, fromBranchId, toBranchId, transferDate])
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model Receipt {
  id               String       @id
  customerId       Int?
  customer         Customer?    @relation("CustomerToReceipts", fields: [customerId], references: [id], onDelete: SetNull)
  cashier          String       @db.VarChar(100)
  date             DateTime
  items            Json
  total            Float
  creditTotal      Float?
  amountPaid       Float
  remainingBalance Float
  returnCode       String       @db.VarChar(50)
  branchId         Int?
  deliveryMethod   String       @db.VarChar(50)
  paymentMethod    PaymentType
  transaction      Transaction? @relation("TransactionToReceipt")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([customerId, date])
}