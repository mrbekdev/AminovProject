
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  location   String     @db.VarChar(255)
  phone      String?    @db.VarChar(20)
  products   Product[]  @relation("BranchProducts")
  users      User[]     @relation("BranchUsers")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]

  @@unique([name, location])
  @@index([location])
}

model User {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  email               String                @unique @db.VarChar(255)
  password            String                @db.VarChar(255)
  phone               String?               @db.VarChar(20)
  role                UserRole
  branch              Branch                @relation("BranchUsers", fields: [branchId], references: [id], onDelete: Restrict)
  branchId            Int
  transactions        Transaction[]         @relation("UserTransactions")
  location            UserLocation?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  productStockHistory ProductStockHistory[] @relation("ProductStockHistory")

  @@index([email, branchId])
}

model UserLocation {
  userId    Int         @id
  user      User        @relation(fields: [userId], references: [id])
  latitude  Float
  longitude Float
  address   String?
  isOnline  Boolean     @default(false)
  lastSeen  DateTime
  updatedAt DateTime    @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  WAREHOUSE
  AUDITOR
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  products    Product[] @relation("CategoryProducts")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  branch      Branch?   @relation(fields: [branchId], references: [id])
  branchId    Int?

  @@index([name])
}

model Product {
  id              Int                   @id @default(autoincrement())
  name            String                @db.VarChar(100)
  barcode         String                @unique @db.VarChar(50)
  description     String?               @db.VarChar(255)
  category        Category              @relation("CategoryProducts", fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId      Int
  status          ProductStatus
  branch          Branch                @relation("BranchProducts", fields: [branchId], references: [id], onDelete: Restrict)
  branchId        Int
  price           Float
  marketPrice     Float?
  model           String?
  initialQuantity Int                   @default(0)
  quantity        Int                   @default(0)
  transactions    TransactionItem[]     @relation("ProductTransactions")
  stockHistory    ProductStockHistory[] @relation("ProductStockHistory")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([barcode, branchId, categoryId])
}

enum ProductStatus {
  IN_WAREHOUSE
  IN_STORE
  SOLD
  DEFECTIVE
  RETURNED
  CARRIER
}

model Customer {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(100)
  lastName     String        @db.VarChar(100)
  phone        String?       @db.VarChar(20)
  address      String?       @db.VarChar(500)
  email        String?       @unique @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("CustomerTransactions")
  receipts     Receipt[]     @relation("CustomerReceipts")

  @@index([phone, email])
}

model Transaction {
  id               Int               @id @default(autoincrement())
  customer         Customer?         @relation("CustomerTransactions", fields: [customerId], references: [id], onDelete: SetNull)
  customerId       Int?
  user             User              @relation("UserTransactions", fields: [userId], references: [id], onDelete: Restrict)
  userId           Int
  type             TransactionType
  status           TransactionStatus @default(PENDING)
  items            TransactionItem[] @relation("TransactionItems")
  discount         Float?            @default(0)
  total            Float
  finalTotal       Float?
  paymentType      PaymentType?
  deliveryMethod   String?
  amountPaid       Float?
  remainingBalance Float?
  receiptId        String?           @unique
  stockHistory     ProductStockHistory[] @relation("TransactionStockHistory")
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  Receipt          Receipt[]

  @@index([customerId, userId, type, receiptId])
}

model TransactionItem {
  id             Int         @id @default(autoincrement())
  transaction    Transaction @relation("TransactionItems", fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId  Int
  product        Product     @relation("ProductTransactions", fields: [productId], references: [id], onDelete: Restrict)
  productId      Int
  quantity       Int
  price          Float
  total          Float
  creditMonth    Int?
  creditPercent  Float?
  monthlyPayment Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([transactionId, productId])
}

enum TransactionType {
  SALE
  RETURN
  TRANSFER
  WRITE_OFF
  STOCK_ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CASH
  CARD
  CREDIT
}

model ProductStockHistory {
  id            Int              @id @default(autoincrement())
  product       Product          @relation("ProductStockHistory", fields: [productId], references: [id], onDelete: Restrict)
  productId     Int
  transaction   Transaction?      @relation("TransactionStockHistory", fields: [transactionId], references: [id], onDelete: SetNull)
  transactionId Int?
  branchId      Int
  quantity      Int
  type          StockHistoryType
  description   String?          @db.VarChar(255)
  createdBy     User?            @relation("ProductStockHistory", fields: [createdById], references: [id], onDelete: SetNull)
  createdById   Int?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([productId, transactionId, createdAt])
}

enum StockHistoryType {
  INFLOW
  OUTFLOW
  ADJUSTMENT
  RETURN
}

model Receipt {
  id               String       @id
  customer         Customer?    @relation("CustomerReceipts", fields: [customerId], references: [id], onDelete: SetNull)
  customerId       Int?
  cashier          String       @db.VarChar(100)
  date             DateTime
  items            Json
  total            Float
  creditTotal      Float?
  amountPaid       Float
  remainingBalance Float
  returnCode       String       @db.VarChar(50)
  branchId         Int?
  deliveryMethod   String       @db.VarChar(50)
  paymentMethod    PaymentType
  transaction      Transaction? @relation(fields: [id], references: [receiptId], onDelete: Cascade)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([customerId, date])
}
