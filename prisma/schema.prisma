generator client {
  provider = "prisma-client-js"
}

// ===== Attendance Tracking =====
enum AttendanceEventType {
  CHECK_IN
  CHECK_OUT
  MANUAL_ADJUST
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  LEFT_EARLY
}

model AttendanceDay {
  id           Int               @id @default(autoincrement())
  userId       Int
  branchId     Int?
  date         DateTime // store date (00:00 time) in UTC
  checkInAt    DateTime?
  checkOutAt   DateTime?
  totalMinutes Int?              @default(0)
  status       AttendanceStatus? @default(PRESENT)
  deviceId     String?           @db.VarChar(100)
  notes        String?           @db.VarChar(255)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch Branch?           @relation(fields: [branchId], references: [id], onDelete: SetNull)
  events AttendanceEvent[]

  @@unique([userId, date])
  @@index([userId])
  @@index([branchId])
  @@index([date])
}

model AttendanceEvent {
  id         Int                 @id @default(autoincrement())
  userId     Int
  branchId   Int?
  dayId      Int?
  eventType  AttendanceEventType
  occurredAt DateTime            @default(now())
  deviceId   String?             @db.VarChar(100)
  similarity Float? // face match score if provided by device
  payload    Json?
  createdAt  DateTime            @default(now())

  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch Branch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  day    AttendanceDay? @relation(fields: [dayId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([branchId])
  @@index([occurredAt])
  @@index([dayId])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  SALE
  STOCK_ADJUSTMENT
  TRANSFER
  PURCHASE
  RETURN
  WRITE_OFF
  DELIVERY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CASH
  CARD
  TERMINAL
  CREDIT
  INSTALLMENT
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  WAREHOUSE
  AUDITOR
  MARKETING
  OPERATOR
}

enum BranchType {
  SKLAD
  SAVDO_MARKAZ
  TELEFON_MARKAZI
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum ProductStatus {
  IN_WAREHOUSE
  IN_STORE
  SOLD
  DEFECTIVE
  RETURNED
  CARRIER
  FIXED
  EXCHANGED
}

model Branch {
  id               Int                    @id @default(autoincrement())
  name             String
  address          String?
  type             BranchType             @default(SAVDO_MARKAZ)
  cashBalance      Float                  @default(0)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  phoneNumber      String?
  status           BranchStatus           @default(ACTIVE)
  products         Product[]
  transactions     Transaction[]          @relation("FromBranch")
  toTransactions   Transaction[]          @relation("ToBranch")
  users            User[]
  allowedUsers     UserBranchAccess[]
  categories       Category[]
  fromTransfers    ProductTransfer[]      @relation("FromBranch")
  toTransfers      ProductTransfer[]      @relation("ToBranch")
  defectiveLogs    DefectiveLog[]
  exchangeRates    CurrencyExchangeRate[]
  cashierReports   CashierReport[]
  DailyRepayment   DailyRepayment[]
  CreditRepayment  CreditRepayment[]
  bonuses          Bonus[]
  attendanceDays   AttendanceDay[]
  attendanceEvents AttendanceEvent[]

  @@index([name])
}

model User {
  id                  Int                    @id @default(autoincrement())
  firstName           String?
  lastName            String?
  phone               String?                @unique
  username            String                 @unique
  password            String?
  role                UserRole
  branchId            Int?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  status              UserStatus             @default(ACTIVE)
  allowedBranches     UserBranchAccess[]
  workStartTime       String?                @db.VarChar(5) // Format: "HH:MM"
  workEndTime         String?                @db.VarChar(5) // Format: "HH:MM"
  workShift           String?                @default("DAY") // DAY or NIGHT
  branch              Branch?                @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdTransactions Transaction[]          @relation("TransactionsCreatedBy")
  soldTransactions    Transaction[]          @relation("TransactionsSoldBy")
  initiatedTransfers  ProductTransfer[]      @relation("InitiatedTransfers")
  approvedTransfers   ProductTransfer[]      @relation("ApprovedTransfers")
  userLocations       UserLocation[]
  defectiveLogs       DefectiveLog[]
  PaymentSchedule     PaymentSchedule[]
  PaymentRepayment    PaymentRepayment[]
  dailyRepayments     DailyRepayment[]
  creditRepayments    CreditRepayment[]
  cashierReports      CashierReport[]        @relation("CashierReports")
  exchangeRates       CurrencyExchangeRate[]
  bonuses             Bonus[]                @relation("UserBonuses")
  createdBonuses      Bonus[]                @relation("BonusCreatedBy")
  attendanceDays      AttendanceDay[]
  attendanceEvents    AttendanceEvent[]
  faceTemplates       FaceTemplate[]
  Transaction         Transaction[]

  @@index([phone])
  @@index([branchId])
}

model UserBranchAccess {
  id        Int      @id @default(autoincrement())
  userId    Int
  branchId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, branchId])
  @@index([userId])
  @@index([branchId])
}

enum UserStatus {
  ACTIVE
  DELETED
}

enum BranchStatus {
  ACTIVE
  DELETED
}

model UserLocation {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  latitude  Float
  longitude Float
  address   String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime
  updatedAt DateTime @updatedAt

  @@id([userId])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.VarChar(255)
  branchId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  branch   Branch?   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  products Product[]

  @@index([name])
  @@index([branchId])
}

model Product {
  id                Int                       @id @default(autoincrement())
  name              String
  barcode           String?
  model             String?
  price             Float
  quantity          Int
  defectiveQuantity Int                       @default(0)
  returnedQuantity  Int                       @default(0)
  exchangedQuantity Int                       @default(0)
  initialQuantity   Int                       @default(0)
  status            ProductStatus             @default(IN_STORE)
  branchId          Int
  categoryId        Int
  marketPrice       Float?
  bonusPercentage   Float?                    @default(0) // Bonus foizi
  isDeleted         Boolean                   @default(false) // Soft delete uchun
  deletedAt         DateTime?
  createdAt         DateTime?                 @default(now())
  updatedAt         DateTime?                 @updatedAt
  branch            Branch                    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  category          Category                  @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  transactions      TransactionItem[]
  DefectiveLog      DefectiveLog[]
  ProductTransfer   ProductTransfer[]
  bonusProducts     TransactionBonusProduct[]

  @@unique([barcode, branchId], name: "barcode_branchId")
  @@index([isDeleted])
  @@index([branchId, isDeleted])
}

model DefectiveLog {
  id          Int      @id @default(autoincrement())
  productId   Int
  quantity    Int
  description String
  userId      Int?
  branchId    Int?
  cashAmount  Float    @default(0)
  actionType  String   @default("DEFECTIVE") // DEFECTIVE, FIXED, RETURN, EXCHANGE
  createdAt   DateTime @default(now())

  // Exchange-specific fields
  exchangeWithProductId    Int? // ID of the product being exchanged with
  replacementQuantity      Int? // Quantity of replacement product
  replacementUnitPrice     Float? // Unit price of replacement product
  replacementTransactionId Int? // ID of the new transaction created for replacement product

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch  Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@map("defective_logs")
}

model Customer {
  id             Int      @id @default(autoincrement())
  fullName       String
  phone          String   @unique
  email          String?  @unique
  address        String?
  passportSeries String? // Passport seriya raqami
  jshshir        String? // JSHSHIR raqami
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  transactions Transaction[]

  @@index([phone])
  @@index([passportSeries])
  @@index([jshshir])
}

model Transaction {
  id                    Int               @id @default(autoincrement())
  customerId            Int?
  userId                Int?
  soldByUserId          Int? // Kim sotganini saqlash uchun
  fromBranchId          Int? // Qaysi filialdan chiqayotgani (SALE, PURCHASE, TRANSFER uchun)
  toBranchId            Int? // Qaysi filialga ketayotgani (TRANSFER uchun)
  type                  TransactionType
  transactionType       String? // Qo'shimcha transaction turi (SALE, PURCHASE, TRANSFER, RETURN, etc.)
  status                TransactionStatus @default(PENDING)
  discount              Float             @default(0)
  total                 Float
  finalTotal            Float
  paymentType           PaymentType?
  upfrontPaymentType    String? // CASH or CARD - for upfront payments in credit/installment
  termUnit              String? // MONTHS or DAYS - for payment terms
  deliveryMethod        String?
  deliveryType          String? // PICKUP or DELIVERY
  deliveryAddress       String? // Delivery address for customer
  amountPaid            Float?
  downPayment           Float?
  remainingBalance      Float?
  receiptId             String?
  description           String?
  updatedById           Int?
  // Credit repayment tracking fields
  creditRepaymentAmount Float?            @default(0)
  lastRepaymentDate     DateTime?
  extraProfit           Float?            @default(0)

  // Term fields for credit/installment
  days   Int? // Kunlar soni (kunlik bo'lib to'lash uchun)
  months Int? // Oylar soni (oylik bo'lib to'lash uchun)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer         Customer?                 @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  user             User?                     @relation("TransactionsCreatedBy", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  soldBy           User?                     @relation("TransactionsSoldBy", fields: [soldByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  fromBranch       Branch?                   @relation("FromBranch", fields: [fromBranchId], references: [id], onDelete: Cascade)
  toBranch         Branch?                   @relation("ToBranch", fields: [toBranchId], references: [id], onDelete: Cascade)
  updatedBy        User?                     @relation(fields: [updatedById], references: [id])
  items            TransactionItem[]
  paymentSchedules PaymentSchedule[]
  PaymentRepayment PaymentRepayment[]
  dailyRepayments  DailyRepayment[]
  creditRepayments CreditRepayment[]
  bonusProducts    TransactionBonusProduct[]
  bonuses          Bonus[]

  @@index([customerId])
  @@index([userId])
  @@index([soldByUserId])
  @@index([fromBranchId])
  @@index([toBranchId])
  @@index([type])
  @@index([transactionType])
  @@index([status])
  @@index([createdAt])
}

model TransactionItem {
  id             Int      @id @default(autoincrement())
  transactionId  Int
  productId      Int?
  quantity       Int
  price          Float
  sellingPrice   Float? // Actual selling price (can be different from product.price)
  originalPrice  Float? // Original product price at time of sale
  total          Float
  creditMonth    Int?
  creditPercent  Float?
  monthlyPayment Float?
  status         String? // Status to track returned items (e.g., "RETURNED", "ACTIVE")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product?    @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model ProductTransfer {
  id            Int            @id @default(autoincrement())
  productId     Int
  fromBranchId  Int
  toBranchId    Int
  quantity      Int
  status        TransferStatus @default(PENDING)
  initiatedById Int
  approvedById  Int?
  transferDate  DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  product     Product @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  fromBranch  Branch  @relation("FromBranch", fields: [fromBranchId], references: [id], onDelete: Cascade)
  toBranch    Branch  @relation("ToBranch", fields: [toBranchId], references: [id], onDelete: Cascade)
  initiatedBy User    @relation("InitiatedTransfers", fields: [initiatedById], references: [id], onDelete: Cascade)
  approvedBy  User?   @relation("ApprovedTransfers", fields: [approvedById], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([fromBranchId])
  @@index([toBranchId])
  @@index([initiatedById])
  @@index([status])
}

model PaymentSchedule {
  id               Int       @id @default(autoincrement())
  transactionId    Int
  month            Int
  payment          Float
  remainingBalance Float
  isPaid           Boolean   @default(false)
  paidAmount       Float     @default(0)
  paidAt           DateTime?
  paidChannel      String?
  paidByUserId     Int?
  createdAt        DateTime  @default(now())

  // Credit repayment tracking fields
  creditRepaymentAmount Float?    @default(0)
  repaymentDate         DateTime?

  // Credit rating field
  rating String? // "YAXSHI" or "YOMON"

  // Daily installment fields
  dueDate            DateTime? // To'lov muddati (kunlik bo'lib to'lash uchun)
  isDailyInstallment Boolean   @default(false) // Kunlik bo'lib to'lash ekanligini belgilash
  daysCount          Int? // Kunlar soni (kunlik bo'lib to'lash uchun)

  // Bo'lib to'lash uchun qo'shimcha maydonlar
  installmentType String? // "DAILY" yoki "MONTHLY"
  totalDays       Int? // Jami kunlar soni (kunlik bo'lib to'lash uchun)
  remainingDays   Int? // Qolgan kunlar soni (kunlik bo'lib to'lash uchun)
  totalMonths     Int? // Jami oylar soni (oylik bo'lib to'lash uchun)
  remainingMonths Int? // Qolgan oylar soni (oylik bo'lib to'lash uchun)

  transaction      Transaction        @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  paidBy           User?              @relation(fields: [paidByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  repayments       PaymentRepayment[]
  creditRepayments CreditRepayment[]
}

model PaymentRepayment {
  id            Int      @id @default(autoincrement())
  transactionId Int
  scheduleId    Int
  amount        Float
  channel       String   @default("CASH") // CASH or CARD
  paidAt        DateTime @default(now())
  paidByUserId  Int?
  createdAt     DateTime @default(now())

  transaction Transaction     @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  schedule    PaymentSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  paidBy      User?           @relation(fields: [paidByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([transactionId])
  @@index([scheduleId])
  @@index([paidAt])
}

// New model for daily repayments (kunlik bo'lib to'lash)
model DailyRepayment {
  id            Int      @id @default(autoincrement())
  transactionId Int
  amount        Float
  channel       String   @default("CASH") // CASH or CARD
  paidAt        DateTime @default(now())
  paidByUserId  Int?
  branchId      Int? // Branch ID for filtering
  createdAt     DateTime @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  paidBy      User?       @relation(fields: [paidByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  branch      Branch?     @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([paidAt])
  @@index([paidByUserId])
  @@index([branchId])
}

// New model for credit repayments (oylik bo'lib to'lash)
model CreditRepayment {
  id            Int      @id @default(autoincrement())
  transactionId Int
  scheduleId    Int? // Optional, for transactions with payment schedules
  amount        Float
  channel       String   @default("CASH") // CASH or CARD
  month         String? // Month name or number (e.g., "1", "2", "Январь", "Кунлик")
  monthNumber   Int? // Numeric month value for calculations
  paidAt        DateTime @default(now())
  paidByUserId  Int?
  branchId      Int? // Branch ID for filtering
  createdAt     DateTime @default(now())

  transaction Transaction      @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  schedule    PaymentSchedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  paidBy      User?            @relation(fields: [paidByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  branch      Branch?          @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([scheduleId])
  @@index([paidAt])
  @@index([paidByUserId])
  @@index([branchId])
}

// New model for cashier reports
model CashierReport {
  id               Int      @id @default(autoincrement())
  cashierId        Int // User ID of the cashier
  branchId         Int // Branch ID
  reportDate       DateTime // Date of the report
  cashTotal        Float    @default(0) // Total cash sales
  cardTotal        Float    @default(0) // Total card sales
  creditTotal      Float    @default(0) // Total credit sales
  installmentTotal Float    @default(0) // Total installment sales
  upfrontTotal     Float    @default(0) // Total upfront payments
  upfrontCash      Float    @default(0) // Upfront payments in cash
  upfrontCard      Float    @default(0) // Upfront payments in card
  soldQuantity     Int      @default(0) // Total quantity sold
  soldAmount       Float    @default(0) // Total amount sold
  repaymentTotal   Float    @default(0) // Total credit repayments
  defectivePlus    Float    @default(0) // Defective returns (positive)
  defectiveMinus   Float    @default(0) // Defective returns (negative)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  cashier User   @relation("CashierReports", fields: [cashierId], references: [id], onDelete: Cascade)
  branch  Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([cashierId, branchId, reportDate])
  @@index([cashierId])
  @@index([branchId])
  @@index([reportDate])
}

model CurrencyExchangeRate {
  id           Int      @id @default(autoincrement())
  fromCurrency String   @default("USD") // From currency (e.g., USD)
  toCurrency   String   @default("UZS") // To currency (e.g., UZS)
  rate         Float // Exchange rate (e.g., 1 USD = 12500 UZS)
  isActive     Boolean  @default(true)
  branchId     Int? // If null, applies to all branches
  createdBy    Int? // User who created this rate
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  branch Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([fromCurrency, toCurrency, branchId])
  @@index([fromCurrency])
  @@index([toCurrency])
  @@index([branchId])
  @@index([isActive])
}

model Bonus {
  id            Int      @id @default(autoincrement())
  userId        Int // Employee receiving the bonus
  amount        Float // Bonus amount
  reason        String // Reason for the bonus
  description   String? // Optional detailed description
  bonusProducts Json? // JSON array of bonus products given to customer
  bonusDate     DateTime @default(now()) // Date when bonus was given
  createdById   Int // Admin/Manager who created the bonus
  branchId      Int? // Branch where bonus was given
  transactionId Int? // Related transaction ID for sales bonuses
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation("UserBonuses", fields: [userId], references: [id], onDelete: Cascade)
  createdBy   User         @relation("BonusCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  branch      Branch?      @relation(fields: [branchId], references: [id], onDelete: SetNull)
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdById])
  @@index([branchId])
  @@index([bonusDate])
  @@index([transactionId])
}

model TransactionBonusProduct {
  id            Int      @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([productId])
}

model WorkSchedule {
  id            Int      @id @default(autoincrement())
  workStartTime String   @db.VarChar(5) // Format: "HH:MM"
  workEndTime   String   @db.VarChar(5) // Format: "HH:MM"
  isDefault     Boolean  @default(false) // Indicates if this is the default schedule
  description   String?  @db.VarChar(255) // Optional description
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([isDefault])
}

model barcodeCounter {
  id        Int      @id @default(autoincrement())
  counter   BigInt   @default(1000000000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FaceTemplate {
  id        Int      @id @default(autoincrement())
  userId    Int
  deviceId  String?  @db.VarChar(100)
  template  String?  @db.Text
  vector    Json?
  imageUrl  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
