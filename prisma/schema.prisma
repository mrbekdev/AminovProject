generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id              Int                   @id @default(autoincrement())
  name            String
  address         String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  products        Product[]
  transactions    Transaction[]
  stockHistory    ProductStockHistory[]
  users           User[]
  categories      Category[]
  productTransfersOut ProductTransfer[] @relation("BranchToTransfersOut")
  productTransfersIn  ProductTransfer[] @relation("BranchToTransfersIn")
}

model User {
  id                  Int                   @id @default(autoincrement())
  firstName           String
  lastName            String
  phone               String                @unique
  role                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  branchId            Int?
  branch              Branch?               @relation(fields: [branchId], references: [id])

  createdTransactions Transaction[]         @relation("TransactionsCreatedBy")
  stockHistoryCreated ProductStockHistory[] @relation("StockHistoryCreatedBy")
  productTransfers    ProductTransfer[]     @relation("UserToTransfers")
  userLocations       UserLocation[]
}

model UserLocation {
  userId    Int      @id
  user      User     @relation(fields: [userId], references: [id])
  latitude  Float
  longitude Float
  address   String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  WAREHOUSE
  AUDITOR
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  branchId    Int?
  branch      Branch?   @relation(fields: [branchId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]
}

model Product {
  id              Int                   @id @default(autoincrement())
  name            String
  quantity        Int                   @default(0)
  price           Float
  branchId        Int
  branch          Branch                @relation(fields: [branchId], references: [id])

  categoryId      Int?
  category        Category?             @relation(fields: [categoryId], references: [id])

  items           TransactionItem[]
  stockHistory    ProductStockHistory[]
  productTransfers ProductTransfer[]    @relation("ProductToTransfers")
}

enum ProductStatus {
  IN_WAREHOUSE
  IN_STORE
  SOLD
  DEFECTIVE
  RETURNED
  CARRIER
}

model Customer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  receipts     Receipt[]
}

model Transaction {
  id               Int                   @id @default(autoincrement())
  customerId       Int?
  customer         Customer?              @relation(fields: [customerId], references: [id])

  userId           Int
  user             User                   @relation("TransactionsCreatedBy", fields: [userId], references: [id])

  branchId         Int?
  branch           Branch?                @relation(fields: [branchId], references: [id])

  type             String // PURCHASE, SALE, STOCK_ADJUSTMENT
  status           String                @default("PENDING")
  discount         Float                 @default(0)
  total            Float
  finalTotal       Float
  paymentType      String?
  deliveryMethod   String?
  amountPaid       Float?
  remainingBalance Float?
  receiptId        String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt

  items            TransactionItem[]
  stockHistory     ProductStockHistory[]
  receipts         Receipt[]
}

enum TransactionType {
  SALE
  RETURN
  TRANSFER
  WRITE_OFF
  STOCK_ADJUSTMENT
  PURCHASE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CASH
  CARD
  CREDIT
}

model TransactionItem {
  id             Int         @id @default(autoincrement())
  transactionId  Int
  transaction    Transaction @relation(fields: [transactionId], references: [id])

  productId      Int
  product        Product     @relation(fields: [productId], references: [id])

  quantity       Int
  price          Float
  total          Float
  creditMonth    Int?
  creditPercent  Float?
  monthlyPayment Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model ProductStockHistory {
  id            Int         @id @default(autoincrement())
  productId     Int
  product       Product     @relation(fields: [productId], references: [id])

  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  branchId      Int
  branch        Branch      @relation(fields: [branchId], references: [id])

  createdById   Int
  createdBy     User        @relation("StockHistoryCreatedBy", fields: [createdById], references: [id])

  quantity      Int
  type          String // INFLOW, OUTFLOW
  createdAt     DateTime    @default(now())
}

enum StockHistoryType {
  INFLOW
  OUTFLOW
  ADJUSTMENT
  RETURN
  TRANSFER_IN
  TRANSFER_OUT
}

model ProductTransfer {
  id            Int            @id @default(autoincrement())

  productId     Int
  product       Product        @relation("ProductToTransfers", fields: [productId], references: [id])

  fromBranchId  Int
  fromBranch    Branch         @relation("BranchToTransfersOut", fields: [fromBranchId], references: [id])

  toBranchId    Int
  toBranch      Branch         @relation("BranchToTransfersIn", fields: [toBranchId], references: [id])

  quantity      Int
  transferDate  DateTime

  initiatedById Int
  initiatedBy   User           @relation("UserToTransfers", fields: [initiatedById], references: [id])

  status        TransferStatus
  notes         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model Receipt {
  id               String       @id
  customerId       Int?
  customer         Customer?    @relation(fields: [customerId], references: [id])

  transactionId    Int?
  transaction      Transaction? @relation(fields: [transactionId], references: [id])

  cashier          String       @db.VarChar(100)
  date             DateTime
  items            Json
  total            Float
  creditTotal      Float?
  amountPaid       Float
  remainingBalance Float
  returnCode       String       @db.VarChar(50)
  branchId         Int?
  deliveryMethod   String       @db.VarChar(50)
  paymentMethod    PaymentType
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([customerId, date])
}
