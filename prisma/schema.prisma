generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  IN_WAREHOUSE
  IN_STORE
  SOLD
  DEFECTIVE
  RETURNED
  CARRIER
}

enum TransactionType {
  SALE
  STOCK_ADJUSTMENT
  TRANSFER
  PURCHASE
  RETURN
  WRITE_OFF
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CASH
  CARD
  CREDIT
}

enum StockHistoryType {
  INFLOW
  OUTFLOW
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
  RETURN
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  WAREHOUSE
  AUDITOR
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products            Product[]
  transactions        Transaction[]
  stockHistory        ProductStockHistory[]
  users               User[]
  categories          Category[]
  productTransfersOut ProductTransfer[]     @relation("BranchToTransfersOut")
  productTransfersIn  ProductTransfer[]     @relation("BranchToTransfersIn")
  receipts            Receipt[]

  @@index([name])
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  phone     String? @unique

  email     String?  @unique
  password  String?
  role      UserRole
  branchId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branch              Branch?               @relation(fields: [branchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdTransactions Transaction[]         @relation("TransactionsCreatedBy")
  stockHistoryCreated ProductStockHistory[] @relation("StockHistoryCreatedBy")
  productTransfers    ProductTransfer[]     @relation("UserToTransfers")
  userLocations       UserLocation[]

  @@index([phone])
  @@index([branchId])
}

model UserLocation {
  userId    Int      @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  latitude  Float
  longitude Float
  address   String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.VarChar(255)
  branchId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  branch   Branch?   @relation(fields: [branchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  products Product[]

  @@index([name])
  @@index([branchId])
}

model Product {
  id                  Int                   @id @default(autoincrement())
  barcode             String?                @unique
  name                String
  quantity            Int
  price               Float
  marketPrice         Float?
  model               String?
  description         String?
  branchId            Int
  categoryId          Int?
  status              String                @default("IN_STORE")
  initialQuantity     Int
  branch              Branch                @relation(fields: [branchId], references: [id])
  category            Category?             @relation(fields: [categoryId], references: [id])
  TransactionItem     TransactionItem[]
  ProductStockHistory ProductStockHistory[]
  ProductTransfer     ProductTransfer[]
}

model Customer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String
  email     String?  @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  receipts     Receipt[]

  @@index([phone])
}

model Transaction {
  id               Int               @id @default(autoincrement())
  customerId       Int?
  userId           Int
  branchId         Int?
  type             TransactionType
  status           TransactionStatus @default(PENDING)
  discount         Float             @default(0)
  total            Float
  finalTotal       Float
  paymentType      PaymentType?
  deliveryMethod   String?
  amountPaid       Float?
  remainingBalance Float?
  receiptId        String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  customer     Customer?             @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  user         User                  @relation("TransactionsCreatedBy", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  branch       Branch?               @relation(fields: [branchId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  items        TransactionItem[]
  stockHistory ProductStockHistory[]
  receipts     Receipt[]

  @@index([customerId])
  @@index([userId])
  @@index([branchId])
}

model TransactionItem {
  id             Int      @id @default(autoincrement())
  transactionId  Int
  productId      Int
  quantity       Int
  price          Float
  total          Float
  creditMonth    Int?
  creditPercent  Float?
  monthlyPayment Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([transactionId])
  @@index([productId])
}

model ProductStockHistory {
  id            Int              @id @default(autoincrement())
  productId     Int
  transactionId Int?
  branchId      Int
  createdById   Int?
  quantity      Int
  type          StockHistoryType
  description   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  branch      Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy   User?        @relation("StockHistoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([productId])
  @@index([transactionId])
  @@index([branchId])
  @@index([createdById])
}

model ProductTransfer {
  id            Int            @id @default(autoincrement())
  productId     Int
  fromBranchId  Int
  toBranchId    Int
  quantity      Int
  initiatedById Int
  transferDate  DateTime       @default(now())
  status        TransferStatus @default(PENDING)
  notes         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  fromBranch  Branch  @relation("BranchToTransfersOut", fields: [fromBranchId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  toBranch    Branch  @relation("BranchToTransfersIn", fields: [toBranchId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  initiatedBy User    @relation("UserToTransfers", fields: [initiatedById], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Product     Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([fromBranchId])
  @@index([toBranchId])
  @@index([initiatedById])
}

model Receipt {
  id               String      @id
  customerId       Int?
  transactionId    Int?
  cashier          String      @db.VarChar(100)
  date             DateTime
  items            Json
  total            Float
  creditTotal      Float?
  amountPaid       Float
  remainingBalance Float
  returnCode       String      @db.VarChar(50)
  branchId         Int?
  deliveryMethod   String      @db.VarChar(50)
  paymentMethod    PaymentType
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  customer    Customer?    @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  branch      Branch?      @relation(fields: [branchId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([customerId])
  @@index([transactionId])
  @@index([branchId])
  @@index([date])
}
